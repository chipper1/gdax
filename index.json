{"repository_name":"github.com/mccallofthewild/gdax","body":"# ðŸ“ˆ GDAX\n\nA Crystal library for interacting with [GDAX](https://www.gdax.com/)'s REST and WebSocket API's.\n\n\n[![Build Status](https://travis-ci.org/mccallofthewild/gdax.svg?branch=master)](https://travis-ci.org/mccallofthewild/gdax) [![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://mccallofthewild.github.io/gdax/) [![GitHub release](https://img.shields.io/github/release/mccallofthewild/gdax.svg)](https://github.com/mccallofthewild/markov/releases)\n\n\n### Visit the [API Documentation](https://mccallofthewild.github.io/gdax/) for a more in-depth look at the library's functionality.\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  gdax:\n    github: mccallofthewild/gdax\n```\n\n## Usage\n\nBegin by requiring `\"gdax\"`.\n\n```crystal\nrequire \"gdax\"\n```\n\n### `GDAX::Client`\n> Interact with the GDAX REST API \n\n`GDAX::Client` is derived from [HTTP::Client](https://crystal-lang.org/api/HTTP/Client.html). Use the inherited instance methods, `#get`, `#post`, `#put` and `#delete` to interact with GDAX's API. \nResponses are instances of [HTTP::Client::Response](https://crystal-lang.org/api/HTTP/Client/Response.html).\n\n#### Basic\nTo authenticate, pass named argument, `auth` to the `GDAX::WebSocket` with a `GDAX::Auth` instance.\nSee [ _Authentication_ ](https://docs.gdax.com/#authentication) for help getting your `key`, `secret`, and `passphrase`.\n\nNOTE: For security purposes, it is recommended that you store your `key`, `secret`, and `passphrase` as environment variables.\n\ne.g.\n```crystal\nauth = GDAX::Auth.new ENV[\"CB-ACCESS-KEY\"], ENV[\"API-SECRET\"], ENV[\"PASSPHRASE\"]\nclient = GDAX::Client.new auth\nclient.get \"/products/BTC-USD/trades\" do |response|\n  puts response.body_io.gets_to_end\nend\n```\n\n#### Unauthenticated\nTo instantiate an unauthenticated `Client`, simply don't pass the `auth` argument.\n\ne.g.\n```crystal\nclient = GDAX::Client.new\nclient.get \"/products\" do |response|\n  puts response.body_io.gets_to_end\nend\n```\n\nSee [the API Documentation](https://mccallofthewild.github.io/gdax/GDAX/Client.html) for more information on `GDAX::WebSocket`.\n\n### `GDAX::WebSocket` \n> Interact with the GDAX WebSocket Feed\n\n#### Basic \nIt's recommended that you [spawn a Fiber](https://crystal-lang.org/docs/guides/concurrency.html) around each `GDAX::WebSocket` you instantiate in order to achieve concurrency.\n\nThe following setup will give you access to GDAX's public _ticker_ stream.\n```crystal\nspawn do\n  ws = GDAX::WebSocket.new production: true, subscription: {\n    \"type\" => \"subscribe\",\n    \"channels\" => [{ \"name\" => \"ticker\", \"product_ids\" => [\"ETH-EUR\"] }]\n  }\n\n  ws.run\nend\nFiber.yield\n```\n\n#### `GDAX::WebSocket#on`\nUse the `#on` method to add event listeners to a `GDAX::WebSocket`.\n\nEvents are based on [ _GDAX's message `type`'s_ ](https://docs.gdax.com/#protocol-overview).\n\n`#on` takes in a `String` of the event to listen for and a block to call when the event is fired.\nThe block is passed two arguments: the first being the `JSON::Any` response data from GDAX, and the second being the event itself.\n\n```crystal \nws.on \"subscriptions\" do |data, event|\n  puts \"subscribed!\"\nend\n```\n\nThough event listeners _can_ be added dynamically on runtime, to avoid missing events, it is recommended that all listeners be added prior to invoking `GDAX::WebSocket#run`.\n\ne.g.\n```crystal\nspawn do\n  ws = GDAX::WebSocket.new production: true, subscription: {\n    \"type\" => \"subscribe\",\n    \"channels\" => [{ \"name\" => \"ticker\", \"product_ids\" => [\"ETH-EUR\"] }]\n  }\n\n  ws.on \"subscriptions\" do |data, event|\n    puts \"subscribed!\"\n  end\n\n  ws.on \"ticker\" do |data, event|\n    puts data[\"price\"] #=> e.g. 264.10000000\n  end\n\n  ws.run\nend\nFiber.yield\n```\n\n#### Authenticating\nIt is possible to authenticate yourself when subscribing to the websocket feed. See the [GDAX documentation on the subject](https://docs.gdax.com/#subscribe).\n\nTo authenticate, pass named argument, `auth` to the `GDAX::WebSocket` with a `GDAX::Auth` instance.\nSee [ _Authentication_ ](https://docs.gdax.com/#authentication) for help getting your `key`, `secret`, and `passphrase`.\n\nNOTE: For security purposes, it is recommended that you store your `key`, `secret`, and `passphrase` as environment variables.\n\n```crystal\nspawn do\n  auth = GDAX::Auth.new key: ENV[\"CB-ACCESS-KEY\"], secret: ENV[\"API-SECRET\"], passphrase: ENV[\"PASSPHRASE\"]\n\n  ws = GDAX::WebSocket.new production: true, subscription: {  \n    \"type\" => \"subscribe\",\n    \"channels\" => [{ \"name\" => \"ticker\", \"product_ids\" => [\"ETH-EUR\"] }]\n  }, auth: auth\n  \n  ws.on \"subscriptions\" do |data, event|\n    puts \"subscribed!\"\n  end\n  ws.run\nend\n```\n\nSee [the API Documentation](https://mccallofthewild.github.io/gdax/GDAX/WebSocket.html) for more information on `GDAX::WebSocket`.\n\n\n## Contributing\n\n1. Fork it ( https://github.com/mccallofthewild/gdax/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [McCall Alexander](https://github.com/mccallofthewild) mccallofthewild - creator, maintainer\n","program":{"html_id":"github.com/mccallofthewild/gdax/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/mccallofthewild/gdax","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mccallofthewild/gdax/GDAX","path":"GDAX.html","kind":"module","full_name":"GDAX","name":"GDAX","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"gdax/Auth.cr","line_number":5,"url":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Auth.cr"},{"filename":"gdax/Client.cr","line_number":3,"url":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Client.cr"},{"filename":"gdax/WebSocket.cr","line_number":5,"url":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr"},{"filename":"gdax/constants.cr","line_number":1,"url":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/constants.cr"},{"filename":"gdax/version.cr","line_number":1,"url":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/version.cr"},{"filename":"gdax.cr","line_number":4,"url":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax.cr"}],"repository_name":"github.com/mccallofthewild/gdax","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"GDAX_ENV_PRODUCTION","name":"GDAX_ENV_PRODUCTION","value":"ENV[PRODUCTION_ENV_VAR_NAME]? && (ENV[PRODUCTION_ENV_VAR_NAME].downcase == \"production\".downcase)","doc":"`true` if environment variable, `GDAX_ENV` is `production`. `false` otherwise.","summary":"<p><code>true</code> if environment variable, <code>GDAX_ENV</code> is <code>production</code>.</p>"},{"id":"PRODUCTION_ENV_VAR_NAME","name":"PRODUCTION_ENV_VAR_NAME","value":"\"GDAX_ENV\"","doc":"The environment variable used to define the `GDAX` environment.","summary":"<p>The environment variable used to define the <code><a href=\"GDAX.html\">GDAX</a></code> environment.</p>"},{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`GDAX` contains classes for interacting with the GDAX API.","summary":"<p><code><a href=\"GDAX.html\">GDAX</a></code> contains classes for interacting with the GDAX API.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mccallofthewild/gdax/GDAX/Auth","path":"GDAX/Auth.html","kind":"class","full_name":"GDAX::Auth","name":"Auth","abstract":false,"superclass":{"html_id":"github.com/mccallofthewild/gdax/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mccallofthewild/gdax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mccallofthewild/gdax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"gdax/Auth.cr","line_number":9,"url":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Auth.cr"}],"repository_name":"github.com/mccallofthewild/gdax","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mccallofthewild/gdax/GDAX","kind":"module","full_name":"GDAX","name":"GDAX"},"doc":"Signs requests for GDAX Authentication. See GDAX's [ _Signing a Message_ ](https://docs.gdax.com/#signing-a-message).","summary":"<p>Signs requests for GDAX Authentication.</p>","class_methods":[],"constructors":[{"id":"new(key:String,secret:String,passphrase:String)-class-method","html_id":"new(key:String,secret:String,passphrase:String)-class-method","name":"new","doc":"`key` is your \"CB-ACCESS-KEY\", `secret` is your \"API-SECRET\", and `passphrase` is \"PASSPHRASE\", as in GDAX's [ _Creating a Request_ ](https://docs.gdax.com/#creating-a-request)","summary":"<p><code>key</code> is your \"CB-ACCESS-KEY\", <code>secret</code> is your \"API-SECRET\", and <code>passphrase</code> is \"PASSPHRASE\", as in GDAX's <a href=\"https://docs.gdax.com/#creating-a-request\" target=\"_blank\"> <em>Creating a Request</em> </a></p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"secret","doc":null,"default_value":"","external_name":"secret","restriction":"String"},{"name":"passphrase","doc":null,"default_value":"","external_name":"passphrase","restriction":"String"}],"args_string":"(key : String, secret : String, passphrase : String)","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Auth.cr#L16","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Auth.cr#L16","def":{"name":"new","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"secret","doc":null,"default_value":"","external_name":"secret","restriction":"String"},{"name":"passphrase","doc":null,"default_value":"","external_name":"passphrase","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(key, secret, passphrase)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"signature(request_path=&quot;&quot;,body:String|Hash=&quot;&quot;,timestamp:Int64?=nil,method=&quot;GET&quot;):String-instance-method","html_id":"signature(request_path=&amp;quot;&amp;quot;,body:String|Hash=&amp;quot;&amp;quot;,timestamp:Int64?=nil,method=&amp;quot;GET&amp;quot;):String-instance-method","name":"signature","doc":"Generates a request signature. Code based on [GDAX's Ruby Sample](https://docs.gdax.com/?ruby#signing-a-message)\n\n`request_path` is the path for your individual request. e.g. `\"/orders\"`\n\n`body` is a stringified  of your request's body. e.g. `%({\"price\":\"1.0\",\"size\":\"1.0\",\"side\":\"buy\",\"product_id\":\"BTC-USD\"})`\n\n`timestamp` is an `Int64` of seconds since Epoch. Defaults to current Epoch.\n\n`method` is a String of the request method. e.g. `\"POST\"`","summary":"<p>Generates a request signature.</p>","abstract":false,"args":[{"name":"request_path","doc":null,"default_value":"\"\"","external_name":"request_path","restriction":""},{"name":"body","doc":null,"default_value":"\"\"","external_name":"body","restriction":"String | Hash"},{"name":"timestamp","doc":null,"default_value":"nil","external_name":"timestamp","restriction":"Int64 | Nil"},{"name":"method","doc":null,"default_value":"\"GET\"","external_name":"method","restriction":""}],"args_string":"(request_path = <span class=\"s\">&quot;&quot;</span>, body : String | Hash = <span class=\"s\">&quot;&quot;</span>, timestamp : Int64? = <span class=\"n\">nil</span>, method = <span class=\"s\">&quot;GET&quot;</span>) : String","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Auth.cr#L31","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Auth.cr#L31","def":{"name":"signature","args":[{"name":"request_path","doc":null,"default_value":"\"\"","external_name":"request_path","restriction":""},{"name":"body","doc":null,"default_value":"\"\"","external_name":"body","restriction":"String | Hash"},{"name":"timestamp","doc":null,"default_value":"nil","external_name":"timestamp","restriction":"Int64 | Nil"},{"name":"method","doc":null,"default_value":"\"GET\"","external_name":"method","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"if body.is_a?(Hash)\n  body = body.to_json\nend\nif !timestamp\n  timestamp = Time.now.epoch\nend\nwhat = \"#{timestamp}#{method}#{request_path}#{body}\"\nsecret = Base64.decode(@secret)\nhash = OpenSSL::HMAC.digest(:sha256, secret, what)\nBase64.strict_encode(hash)\n"}},{"id":"signed_hash(request_path=&quot;&quot;,body:String|Hash=&quot;&quot;,timestamp:Int64=Time.now.epoch,method=&quot;GET&quot;)-instance-method","html_id":"signed_hash(request_path=&amp;quot;&amp;quot;,body:String|Hash=&amp;quot;&amp;quot;,timestamp:Int64=Time.now.epoch,method=&amp;quot;GET&amp;quot;)-instance-method","name":"signed_hash","doc":"Returns full, signed authentication object as a `Hash`.","summary":"<p>Returns full, signed authentication object as a <code>Hash</code>.</p>","abstract":false,"args":[{"name":"request_path","doc":null,"default_value":"\"\"","external_name":"request_path","restriction":""},{"name":"body","doc":null,"default_value":"\"\"","external_name":"body","restriction":"String | Hash"},{"name":"timestamp","doc":null,"default_value":"Time.now.epoch","external_name":"timestamp","restriction":"Int64"},{"name":"method","doc":null,"default_value":"\"GET\"","external_name":"method","restriction":""}],"args_string":"(request_path = <span class=\"s\">&quot;&quot;</span>, body : String | Hash = <span class=\"s\">&quot;&quot;</span>, timestamp : Int64 = <span class=\"t\">Time</span>.now.epoch, method = <span class=\"s\">&quot;GET&quot;</span>)","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Auth.cr#L44","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Auth.cr#L44","def":{"name":"signed_hash","args":[{"name":"request_path","doc":null,"default_value":"\"\"","external_name":"request_path","restriction":""},{"name":"body","doc":null,"default_value":"\"\"","external_name":"body","restriction":"String | Hash"},{"name":"timestamp","doc":null,"default_value":"Time.now.epoch","external_name":"timestamp","restriction":"Int64"},{"name":"method","doc":null,"default_value":"\"GET\"","external_name":"method","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return {\"CB-ACCESS-KEY\" => @key, \"CB-ACCESS-PASSPHRASE\" => @passphrase, \"CB-ACCESS-TIMESTAMP\" => timestamp, \"CB-ACCESS-SIGN\" => signature(request_path, body, timestamp, method)}"}},{"id":"signed_headers(request_path=&quot;&quot;,body:String|Hash=&quot;&quot;,timestamp:Int64=Time.now.epoch,method=&quot;GET&quot;)-instance-method","html_id":"signed_headers(request_path=&amp;quot;&amp;quot;,body:String|Hash=&amp;quot;&amp;quot;,timestamp:Int64=Time.now.epoch,method=&amp;quot;GET&amp;quot;)-instance-method","name":"signed_headers","doc":"Returns full, signed authentication object as a `HTTP::Headers` instance.","summary":"<p>Returns full, signed authentication object as a <code>HTTP::Headers</code> instance.</p>","abstract":false,"args":[{"name":"request_path","doc":null,"default_value":"\"\"","external_name":"request_path","restriction":""},{"name":"body","doc":null,"default_value":"\"\"","external_name":"body","restriction":"String | Hash"},{"name":"timestamp","doc":null,"default_value":"Time.now.epoch","external_name":"timestamp","restriction":"Int64"},{"name":"method","doc":null,"default_value":"\"GET\"","external_name":"method","restriction":""}],"args_string":"(request_path = <span class=\"s\">&quot;&quot;</span>, body : String | Hash = <span class=\"s\">&quot;&quot;</span>, timestamp : Int64 = <span class=\"t\">Time</span>.now.epoch, method = <span class=\"s\">&quot;GET&quot;</span>)","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Auth.cr#L54","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Auth.cr#L54","def":{"name":"signed_headers","args":[{"name":"request_path","doc":null,"default_value":"\"\"","external_name":"request_path","restriction":""},{"name":"body","doc":null,"default_value":"\"\"","external_name":"body","restriction":"String | Hash"},{"name":"timestamp","doc":null,"default_value":"Time.now.epoch","external_name":"timestamp","restriction":"Int64"},{"name":"method","doc":null,"default_value":"\"GET\"","external_name":"method","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"auth_obj = self.signed_hash(request_path, body, timestamp, method)\nHTTP::Headers {\"CB-ACCESS-KEY\" => @key, \"CB-ACCESS-PASSPHRASE\" => @passphrase, \"CB-ACCESS-TIMESTAMP\" => timestamp.to_s, \"CB-ACCESS-SIGN\" => signature(request_path, body, timestamp, method)}\n"}}],"macros":[],"types":[]},{"html_id":"github.com/mccallofthewild/gdax/GDAX/Client","path":"GDAX/Client.html","kind":"class","full_name":"GDAX::Client","name":"Client","abstract":false,"superclass":{"html_id":"github.com/mccallofthewild/gdax/HTTP/Client","kind":"class","full_name":"HTTP::Client","name":"Client"},"ancestors":[{"html_id":"github.com/mccallofthewild/gdax/HTTP/Client","kind":"class","full_name":"HTTP::Client","name":"Client"},{"html_id":"github.com/mccallofthewild/gdax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mccallofthewild/gdax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"gdax/Client.cr","line_number":14,"url":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Client.cr"}],"repository_name":"github.com/mccallofthewild/gdax","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DEFAULT_PRODUCTION_HOST","name":"DEFAULT_PRODUCTION_HOST","value":"\"api.gdax.com\"","doc":"GDAX's API URL","summary":"<p>GDAX's API URL</p>"},{"id":"DEFAULT_SANDBOX_HOST","name":"DEFAULT_SANDBOX_HOST","value":"\"api-public.sandbox.gdax.com\"","doc":"GDAX's Sandbox API URL","summary":"<p>GDAX's Sandbox API URL</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mccallofthewild/gdax/GDAX","kind":"module","full_name":"GDAX","name":"GDAX"},"doc":"An [`HTTP::Client`](https://crystal-lang.org/api/HTTP/Client.html) for interacting with the [GDAX Client API](https://docs.gdax.com/#api).\n```\nauth = GDAX::Auth.new ENV[\"CB-ACCESS-KEY\"], ENV[\"API-SECRET\"], ENV[\"PASSPHRASE\"]\nclient = GDAX::Client.new auth\nclient.get \"/products/BTC-USD/trades\" do |response|\n  success = true\nend\n```","summary":"<p>An <a href=\"https://crystal-lang.org/api/HTTP/Client.html\" target=\"_blank\"><code>HTTP::Client</code></a> for interacting with the <a href=\"https://docs.gdax.com/#api\" target=\"_blank\">GDAX Client API</a>.</p>","class_methods":[],"constructors":[{"id":"new(auth:GDAX::Auth,production=true,host=default_host(production),**args)-class-method","html_id":"new(auth:GDAX::Auth,production=true,host=default_host(production),**args)-class-method","name":"new","doc":"A constructor for an authenticated client (for access to Private _and_ Public endpoints).\n`auth` is a `GDAX::Auth` instance containing your API keys.\n`host` is the host uri string. This defaults to `DEFAULT_PRODUCTION_HOST` if `production` is not set to false.","summary":"<p>A constructor for an authenticated client (for access to Private <em>and</em> Public endpoints).</p>","abstract":false,"args":[{"name":"auth","doc":null,"default_value":"","external_name":"auth","restriction":"GDAX::Auth"},{"name":"production","doc":null,"default_value":"true","external_name":"production","restriction":""},{"name":"host","doc":null,"default_value":"default_host(production)","external_name":"host","restriction":""}],"args_string":"(auth : GDAX::Auth, production = <span class=\"n\">true</span>, host = default_host(production), **args)","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Client.cr#L25","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Client.cr#L25","def":{"name":"new","args":[{"name":"auth","doc":null,"default_value":"","external_name":"auth","restriction":"GDAX::Auth"},{"name":"production","doc":null,"default_value":"true","external_name":"production","restriction":""},{"name":"host","doc":null,"default_value":"default_host(production)","external_name":"host","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(auth, production, host, **args)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(production=true,host=default_host(production),**args)-class-method","html_id":"new(production=true,host=default_host(production),**args)-class-method","name":"new","doc":"A constructor for an unauthenticated client (for access to Public endpoints only).\n`host` is the host uri string. This defaults to `DEFAULT_PRODUCTION_HOST` if `production` is not set to false.","summary":"<p>A constructor for an unauthenticated client (for access to Public endpoints only).</p>","abstract":false,"args":[{"name":"production","doc":null,"default_value":"true","external_name":"production","restriction":""},{"name":"host","doc":null,"default_value":"default_host(production)","external_name":"host","restriction":""}],"args_string":"(production = <span class=\"n\">true</span>, host = default_host(production), **args)","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Client.cr#L53","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Client.cr#L53","def":{"name":"new","args":[{"name":"production","doc":null,"default_value":"true","external_name":"production","restriction":""},{"name":"host","doc":null,"default_value":"default_host(production)","external_name":"host","restriction":""}],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(production, host, **args)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"authenticated_headers(request_path=&quot;&quot;,body:String|Hash=&quot;&quot;,timestamp:Int64=Time.now.epoch,method=&quot;GET&quot;)-instance-method","html_id":"authenticated_headers(request_path=&amp;quot;&amp;quot;,body:String|Hash=&amp;quot;&amp;quot;,timestamp:Int64=Time.now.epoch,method=&amp;quot;GET&amp;quot;)-instance-method","name":"authenticated_headers","doc":"Returns authenticated headers; Placed on every request if `Client` is authenticated.\nAll arguments are passed directly to `GDAX::Auth#signed_headers`.","summary":"<p>Returns authenticated headers; Placed on every request if <code><a href=\"../GDAX/Client.html\">Client</a></code> is authenticated.</p>","abstract":false,"args":[{"name":"request_path","doc":null,"default_value":"\"\"","external_name":"request_path","restriction":""},{"name":"body","doc":null,"default_value":"\"\"","external_name":"body","restriction":"String | Hash"},{"name":"timestamp","doc":null,"default_value":"Time.now.epoch","external_name":"timestamp","restriction":"Int64"},{"name":"method","doc":null,"default_value":"\"GET\"","external_name":"method","restriction":""}],"args_string":"(request_path = <span class=\"s\">&quot;&quot;</span>, body : String | Hash = <span class=\"s\">&quot;&quot;</span>, timestamp : Int64 = <span class=\"t\">Time</span>.now.epoch, method = <span class=\"s\">&quot;GET&quot;</span>)","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Client.cr#L81","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Client.cr#L81","def":{"name":"authenticated_headers","args":[{"name":"request_path","doc":null,"default_value":"\"\"","external_name":"request_path","restriction":""},{"name":"body","doc":null,"default_value":"\"\"","external_name":"body","restriction":"String | Hash"},{"name":"timestamp","doc":null,"default_value":"Time.now.epoch","external_name":"timestamp","restriction":"Int64"},{"name":"method","doc":null,"default_value":"\"GET\"","external_name":"method","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"headers = base_headers\nheaders.merge!(@auth.signed_headers(request_path, body, timestamp, method))\nheaders\n"}},{"id":"base_headers-instance-method","html_id":"base_headers-instance-method","name":"base_headers","doc":"Returns standard, unauthenticated headers placed on every request.","summary":"<p>Returns standard, unauthenticated headers placed on every request.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Client.cr#L73","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Client.cr#L73","def":{"name":"base_headers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"HTTP::Headers {\"Content-Type\" => \"application/json\"}"}}],"macros":[],"types":[]},{"html_id":"github.com/mccallofthewild/gdax/GDAX/Exceptions","path":"GDAX/Exceptions.html","kind":"module","full_name":"GDAX::Exceptions","name":"Exceptions","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"gdax/Exceptions.cr","line_number":2,"url":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Exceptions.cr"}],"repository_name":"github.com/mccallofthewild/gdax","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mccallofthewild/gdax/GDAX","kind":"module","full_name":"GDAX","name":"GDAX"},"doc":"Custom GDAX Exceptions","summary":"<p>Custom GDAX Exceptions</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/mccallofthewild/gdax/GDAX/Exceptions/ResponseException","path":"GDAX/Exceptions/ResponseException.html","kind":"class","full_name":"GDAX::Exceptions::ResponseException","name":"ResponseException","abstract":false,"superclass":{"html_id":"github.com/mccallofthewild/gdax/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/mccallofthewild/gdax/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/mccallofthewild/gdax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mccallofthewild/gdax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"gdax/Exceptions.cr","line_number":5,"url":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/Exceptions.cr"}],"repository_name":"github.com/mccallofthewild/gdax","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mccallofthewild/gdax/GDAX/Exceptions","kind":"module","full_name":"GDAX::Exceptions","name":"Exceptions"},"doc":"Typically raised when a WebSocket message with `error` type comes back.","summary":"<p>Typically raised when a WebSocket message with <code>error</code> type comes back.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/mccallofthewild/gdax/GDAX/WebSocket","path":"GDAX/WebSocket.html","kind":"class","full_name":"GDAX::WebSocket","name":"WebSocket","abstract":false,"superclass":{"html_id":"github.com/mccallofthewild/gdax/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/mccallofthewild/gdax/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/mccallofthewild/gdax/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"gdax/WebSocket.cr","line_number":21,"url":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr"}],"repository_name":"github.com/mccallofthewild/gdax","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DEFAULT_PRODUCTION_HOST","name":"DEFAULT_PRODUCTION_HOST","value":"\"wss://ws-feed.gdax.com\"","doc":"GDAX's API URL","summary":"<p>GDAX's API URL</p>"},{"id":"DEFAULT_SANDBOX_HOST","name":"DEFAULT_SANDBOX_HOST","value":"\"wss://ws-feed.sandbox.gdax.com\"","doc":"GDAX's Sandbox API URL","summary":"<p>GDAX's Sandbox API URL</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mccallofthewild/gdax/GDAX","kind":"module","full_name":"GDAX","name":"GDAX"},"doc":"GDAX [WebSocket API](https://docs.gdax.com/#websocket-feed) wrapper.\n\n```\nws = GDAX::WebSocket.new production: true, subscription: {\n  \"type\" => \"subscribe\",\n  \"channels\" => [{ \"name\" => \"heartbeat\", \"product_ids\" => [\"ETH-EUR\"] }]\n}\n\nws.on \"subscriptions\" do |data, event|\n  puts \"GDAX CONNECTED\"\nend\n\nws.run\n```","summary":"<p>GDAX <a href=\"https://docs.gdax.com/#websocket-feed\" target=\"_blank\">WebSocket API</a> wrapper.</p>","class_methods":[],"constructors":[{"id":"new(subscription:Hash,production=true,uri:URI|String=default_host(production),headers=HTTP::Headers.new,auth:GDAX::Auth?=nil)-class-method","html_id":"new(subscription:Hash,production=true,uri:URI|String=default_host(production),headers=HTTP::Headers.new,auth:GDAX::Auth?=nil)-class-method","name":"new","doc":"`subscription` is your [ _GDAX Subscribe Request_ ](https://docs.gdax.com/#subscribe) in the form of a `Hash`.\n\n`uri` is the WebSocket URI. Defaults to sandbox URI unless `production` is set to `true`\n\n`headers` are any additional headers you would like to add to the connection.\n\nIf `production` is false, sandbox URI will be used by default.\n\n`auth` can be passed to [sign/authenticate over WebSockets](https://docs.gdax.com/#subscribe).","summary":"<p><code>subscription</code> is your <a href=\"https://docs.gdax.com/#subscribe\" target=\"_blank\"> <em>GDAX Subscribe Request</em> </a> in the form of a <code>Hash</code>.</p>","abstract":false,"args":[{"name":"subscription","doc":null,"default_value":"","external_name":"subscription","restriction":"Hash"},{"name":"production","doc":null,"default_value":"true","external_name":"production","restriction":""},{"name":"uri","doc":null,"default_value":"default_host(production)","external_name":"uri","restriction":"URI | String"},{"name":"headers","doc":null,"default_value":"HTTP::Headers.new","external_name":"headers","restriction":""},{"name":"auth","doc":null,"default_value":"nil","external_name":"auth","restriction":"GDAX::Auth | ::Nil"}],"args_string":"(subscription : Hash, production = <span class=\"n\">true</span>, uri : URI | String = default_host(production), headers = <span class=\"t\">HTTP</span><span class=\"t\">::</span><span class=\"t\">Headers</span>.<span class=\"k\">new</span>, auth : GDAX::Auth? = <span class=\"n\">nil</span>)","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr#L43","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr#L43","def":{"name":"new","args":[{"name":"subscription","doc":null,"default_value":"","external_name":"subscription","restriction":"Hash"},{"name":"production","doc":null,"default_value":"true","external_name":"production","restriction":""},{"name":"uri","doc":null,"default_value":"default_host(production)","external_name":"uri","restriction":"URI | String"},{"name":"headers","doc":null,"default_value":"HTTP::Headers.new","external_name":"headers","restriction":""},{"name":"auth","doc":null,"default_value":"nil","external_name":"auth","restriction":"GDAX::Auth | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(subscription, production, uri, headers, auth)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"close(*args)-instance-method","html_id":"close(*args)-instance-method","name":"close","doc":"closes the WebSocket\nalias to `HTTP::WebSocket`'s `close` method.","summary":"<p>closes the WebSocket alias to <code>HTTP::WebSocket</code>'s <code><a href=\"../GDAX/WebSocket.html#close%28%2Aargs%29-instance-method\">#close</a></code> method.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args)","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr#L72","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr#L72","def":{"name":"close","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ws.close(*args)"}},{"id":"closed?(*args)-instance-method","html_id":"closed?(*args)-instance-method","name":"closed?","doc":"Returns Bool based on whether WebSocket is closed.\nalias to `HTTP::WebSocket`'s `closed?` method.","summary":"<p>Returns Bool based on whether WebSocket is closed.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args)","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr#L78","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr#L78","def":{"name":"closed?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ws.closed?(*args)"}},{"id":"on(event:String,&block:Proc(*EmitArgType,Void))-instance-method","html_id":"on(event:String,&amp;block:Proc(*EmitArgType,Void))-instance-method","name":"on","doc":"Adds event listener for events based on [ _GDAX's message `type`'s_ ](https://docs.gdax.com/#protocol-overview).\nTakes in `String` of the event to listen for and a block to run when the event fires.\nThe block is passed two arguments: the first being the `JSON::Any` response data from GDAX, and the second being the event itself.\ne.g.\n```crystal\nws.on \"subscriptions\" do |data, event|\n  message_recieved = true\nend\n```","summary":"<p>Adds event listener for events based on <a href=\"https://docs.gdax.com/#protocol-overview\" target=\"_blank\"> <em>GDAX's message <code>type</code>'s</em> </a>.</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"String"}],"args_string":"(event : String, &block : Proc(*EmitArgType, Void))","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr#L98","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr#L98","def":{"name":"on","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"Proc(*EmitArgType, Void)"},"return_type":"","visibility":"Public","body":"@emitter.on(event, ->(x : EmitArgType) do\n  block.call(*x)\nend)"}},{"id":"on_close(&on_close:String->)-instance-method","html_id":"on_close(&amp;on_close:String-&gt;)-instance-method","name":"on_close","doc":"alias to `HTTP::WebSocket`'s `on_close` method.","summary":"<p>alias to <code>HTTP::WebSocket</code>'s <code><a href=\"../GDAX/WebSocket.html#on_close%28%26on_close%3AString-%3E%29-instance-method\">#on_close</a></code> method.</p>","abstract":false,"args":[],"args_string":"(&on_close : String -> )","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr#L83","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr#L83","def":{"name":"on_close","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"on_close","doc":null,"default_value":"","external_name":"on_close","restriction":"(String -> )"},"return_type":"","visibility":"Public","body":"@ws.on_close do |close_message|\n  on_close.call(close_message)\nend"}},{"id":"run(*args)-instance-method","html_id":"run(*args)-instance-method","name":"run","doc":"runs the WebSocket (invoke after adding \"subscriptions\" event listeners; must be called for the WebSocket to run)\nalias to `HTTP::WebSocket`'s `run` method.","summary":"<p>runs the WebSocket (invoke after adding \"subscriptions\" event listeners; must be called for the WebSocket to run) alias to <code>HTTP::WebSocket</code>'s <code><a href=\"../GDAX/WebSocket.html#run%28%2Aargs%29-instance-method\">#run</a></code> method.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args)","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr#L66","source_link":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr#L66","def":{"name":"run","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ws.run(*args)"}}],"macros":[],"types":[{"html_id":"github.com/mccallofthewild/gdax/GDAX/WebSocket/EmitArgType","path":"GDAX/WebSocket/EmitArgType.html","kind":"alias","full_name":"GDAX::WebSocket::EmitArgType","name":"EmitArgType","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"gdax/WebSocket.cr","line_number":30,"url":"https://github.com/mccallofthewild/gdax/blob/a5c57d6ed17677d358d9b571db23b6ddfd008b7f/src/gdax/WebSocket.cr"}],"repository_name":"github.com/mccallofthewild/gdax","program":false,"enum":false,"alias":true,"aliased":"Tuple(JSON::Any, String)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/mccallofthewild/gdax/GDAX/WebSocket","kind":"class","full_name":"GDAX::WebSocket","name":"WebSocket"},"doc":"The unsplatted arguments an event listener can accept.","summary":"<p>The unsplatted arguments an event listener can accept.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}]}}